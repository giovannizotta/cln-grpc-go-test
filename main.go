package main

import (
	pb "cln-grpc-go-test/proto"
	"context"
	"crypto/tls"
	"crypto/x509"
	"flag"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"log"
	"os"
	"time"
)

const (
	// Location of the certs and key of the first node(l1) generated by startup_regtest.sh
	certPath = "/tmp/l1-regtest/regtest/"
	host     = "localhost"
	// The grpcPort is the port that the grpc server is listening on.
	// It is set when starting lightningd with the option --grpc-port=PORT.
	// Note that if you use startup_regtest.sh you must start the nodes with the --grpc-port option.
	grpcPort = "42069"
)

var (
	addr       = flag.String("addr", host+":"+grpcPort, "The address (IP:port) to connect to")
	clientKey  = flag.String("client-key", certPath+"client-key.pem", "The client key")
	clientCert = flag.String("client-cert", certPath+"client.pem", "The client cert")
	caCert     = flag.String("ca-cert", certPath+"ca.pem", "The CA cert")
)

func getTlsConfig() *tls.Config {
	tlsConfig := &tls.Config{}
	if *clientCert != "" && *clientKey != "" {
		cert, err := tls.LoadX509KeyPair(*clientCert, *clientKey)
		if err != nil {
			log.Fatalf("error loading X.509 key pair: %v", err)
		}
		tlsConfig.Certificates = append(tlsConfig.Certificates, cert)
	}
	if *caCert != "" {
		b, err := os.ReadFile(*caCert)
		if err != nil {
			log.Fatalf("error reading %s: %v", *caCert, err)
		}
		pool := x509.NewCertPool()
		pool.AppendCertsFromPEM(b)
		tlsConfig.RootCAs = pool
	}
	return tlsConfig
}

func main() {
	flag.Parse()
	// Set up a connection to the server.
	conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(credentials.NewTLS(getTlsConfig())))
	if err != nil {
		log.Fatalf("failed to dial: %v", err)
	}
	defer conn.Close()

	client := pb.NewNodeClient(conn)
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	response, err := client.Getinfo(ctx, &pb.GetinfoRequest{})
	if err != nil {
		log.Fatalf("%+v", err)
	}

	log.Printf("Received response: %+v", response)
}
